[{"/home/divyansh/Desktop/current workspace/Gitify/src/index.js":"1","/home/divyansh/Desktop/current workspace/Gitify/src/App.js":"2","/home/divyansh/Desktop/current workspace/Gitify/src/reportWebVitals.js":"3","/home/divyansh/Desktop/current workspace/Gitify/src/component/ScrollMessage.js":"4","/home/divyansh/Desktop/current workspace/Gitify/src/component/Avatar.js":"5","/home/divyansh/Desktop/current workspace/Gitify/src/component/UserDetails.js":"6","/home/divyansh/Desktop/current workspace/Gitify/src/component/repoSection/RepoSection.js":"7","/home/divyansh/Desktop/current workspace/Gitify/src/component/repoSection/PublicRepo/PublicRepo.js":"8","/home/divyansh/Desktop/current workspace/Gitify/src/component/repoSection/ForkRepo/ForkRepo.js":"9"},{"size":561,"mtime":1610799065901,"results":"10","hashOfConfig":"11"},{"size":3863,"mtime":1611112895098,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610798610582,"results":"13","hashOfConfig":"11"},{"size":375,"mtime":1611028698953,"results":"14","hashOfConfig":"11"},{"size":304,"mtime":1611057404936,"results":"15","hashOfConfig":"11"},{"size":1466,"mtime":1611057421881,"results":"16","hashOfConfig":"11"},{"size":805,"mtime":1611115033594,"results":"17","hashOfConfig":"11"},{"size":2083,"mtime":1611114557420,"results":"18","hashOfConfig":"11"},{"size":2065,"mtime":1611114782215,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"zfysi",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/home/divyansh/Desktop/current workspace/Gitify/src/index.js",[],["43","44"],"/home/divyansh/Desktop/current workspace/Gitify/src/App.js",["45"],"import './App.css';\nimport { Icon, Input, Button } from 'semantic-ui-react'\nimport React, {Component} from 'react';\nimport Avatar from './component/Avatar'\nimport ScrollMessage from './component/ScrollMessage'\nimport UserDetails from './component/UserDetails'\nimport RepoSection from './component/repoSection/RepoSection'\n\nvar username = \"\";\n\nclass App extends Component{\n    constructor() \n    {\n      super();\n      this.state = {\n        showDetails : false,\n        login : \"\",\n        avatar_url : \"\",\n        html_url : \"\",\n        followers_url : \"\",\n        following_url : \"\",\n        subscriptions_url : \"\",\n        repos_url : \"\",\n        name : \"\",\n        company : \"\",\n        blog : \"\",\n        location : \"\",\n        email : \"\",\n        bio : \"\",\n        twitter_username : \"\",\n        public_repos : 0,\n        followers : 0,\n        following : 0, \n        created_at : \"\",\n      }\n    }\n\n    fetchUrl = async () => {\n        var url = \"https://api.github.com/users/\"+username;\n        await fetch(url)\n          .then(res => res.json())\n          .then(\n            (result) => {\n              this.setState({\n                showDetails: true,\n                login : result['login'],\n                avatar_url : result['avatar_url'],\n                html_url : result['html_url'],\n                followers_url : ['followers_url'],\n                following_url : result['following_url'],\n                subscriptions_url : result['subscriptions_url'],\n                repos_url : result['repos_url'],\n                name : result['name'],\n                company : result['company'],\n                blog : result['blog'],\n                location : result['location'],\n                email : result['email'],\n                bio : result['bio'],\n                twitter_username : result['twitter_username'],\n                public_repos : result['public_repos'],\n                followers : result['followers'],\n                following : result['following'],  \n                created_at : result['created_at'],\n              });\n              console.log(\"FETCH SUCCESSFULL\");\n            },\n            (error) => {\n              console.log(\"APP FETCH FAILED : \",error);\n            }\n          )\n      }\n\n    handleMessage = (e) => {\n        username = e.target.value;\n    }\n\n    render(){\n        var detailsSection= \"\";\n        var scroll = \"\";\n        if(this.state.showDetails)\n        {\n          scroll = <ScrollMessage/>;\n          detailsSection = (\n            <div>\n              <Avatar avatar_url={this.state.avatar_url}/><br/>\n              <UserDetails name={this.state.name} created_at={this.state.created_at} username={username} followers={this.state.followers} following={this.state.following} company={this.state.company} location={this.state.location} githubUrl={this.state.html_url}/>\n              <RepoSection username={username}/>\n            </div>\n          );\n        }\n        \n        return ( \n            <div className = \"App\" >\n                <header className = \"App-header\" >\n                  <div className=\"fetchForm\">\n                    <a className = \"App-name\" href = \"#\">Gitify </a>\n                    <br/> <br/>\n                    <Icon disabled name = 'github' size = 'massive'/> \n                    < br/>\n                    <Input className = \"App-input\" icon = { < Icon name = 'search' inverted circular link/>} onChange = { this.handleMessage } placeholder = 'Github Username' size = 'mini' />\n                    <Button color = 'green' size = 'massive' onClick={ this.fetchUrl }> Gitify </Button> \n                    {scroll}\n                  </div>          \n                    <div className=\"detailsSection\">\n                      {detailsSection}\n                    </div>       \n                </header> \n            </div>\n        );\n    }\n}\n\nexport default App;","/home/divyansh/Desktop/current workspace/Gitify/src/reportWebVitals.js",[],"/home/divyansh/Desktop/current workspace/Gitify/src/component/ScrollMessage.js",["46"],"import { Message } from 'semantic-ui-react'\nimport React, {Component} from 'react'\nimport './ScrollMessage.css'\n\nexport default class ScrollMessage extends Component{\n    constructor(props) \n    {\n        super(props);\n    }\n    render(){\n        return(\n            <Message className=\"scroll-message\" floating size='small'>Please Scroll Down !</Message>\n        );\n    }\n}\n","/home/divyansh/Desktop/current workspace/Gitify/src/component/Avatar.js",["47"],"import React, {Component} from 'react'\nimport './Avatar.css'\n\nexport default class Avatar extends Component{\n    constructor(props) \n    {\n        super(props);\n    }\n    render(){\n        return(\n            <img className=\"avatar-img\" src={this.props.avatar_url} alt=\"Avatar\"></img>\n        );\n    }\n}\n","/home/divyansh/Desktop/current workspace/Gitify/src/component/UserDetails.js",["48"],"import React, {Component} from 'react'\nimport './UserDetails.css'\n\nexport default class UserDetails extends Component{\n    constructor(props) \n    {\n        super(props);\n    }\n    render(){\n        const date = this.props.created_at.substring(0,10);\n        const name = this.props.name  ? this.props.name : this.props.username;\n        const followersCount = this.props.followers ? this.props.followers : \"NA\";\n        const followingCount = this.props.following ? this.props.following : \"NA\";\n        const company = this.props.company ? this.props.company : \"NA\";\n        const location = this.props.location ? this.props.location : \"NA\";\n        return(\n            <div className=\"userDetails\">\n                <p className=\"userName\"><span className=\"divider\">-</span><a href={this.props.githubUrl}>{name}</a></p>\n                <p className=\"joiningDate\"><span className=\"divider\">-</span>Joined on <span className=\"date\">{date}</span></p>\n                <p className=\"jobTitle\"><span className=\"divider\">-</span>Working as <span className=\"company\">{company}</span> and living in <span className=\"location\">{location}</span></p>\n                <p className=\"followTitle\"><span className=\"divider\">-</span>Followers : <span className=\"followCount\"> {followersCount} </span> <span className=\"divider\"> | </span> <span className=\"divider\">-</span>Following : <span className=\"followCount\"> {followingCount} </span></p>\n            </div>\n        );\n    }\n}\n","/home/divyansh/Desktop/current workspace/Gitify/src/component/repoSection/RepoSection.js",["49"],"/home/divyansh/Desktop/current workspace/Gitify/src/component/repoSection/PublicRepo/PublicRepo.js",[],"/home/divyansh/Desktop/current workspace/Gitify/src/component/repoSection/ForkRepo/ForkRepo.js",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":96,"column":21,"nodeType":"56","endLine":96,"endColumn":58},{"ruleId":"57","severity":1,"message":"58","line":6,"column":5,"nodeType":"59","messageId":"60","endLine":9,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":5,"column":5,"nodeType":"59","messageId":"60","endLine":8,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":5,"column":5,"nodeType":"59","messageId":"60","endLine":8,"endColumn":6},{"ruleId":"57","severity":1,"message":"58","line":8,"column":5,"nodeType":"59","messageId":"60","endLine":11,"endColumn":6},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]